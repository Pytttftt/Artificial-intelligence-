import speech_recognition as sr
import pyttsx3
import webbrowser
import datetime
import wikipedia
import smtplib
import requests
import os
import openai
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Initialize AI Assistant
engine = pyttsx3.init()
recognizer = sr.Recognizer()

# OpenAI API Key
openai.api_key = os.getenv("OPENAI_API_KEY")

# Email Configuration
EMAIL = os.getenv("EMAIL")
PASSWORD = os.getenv("EMAIL_PASSWORD")

def speak(text):
    """Convert text to speech"""
    engine.say(text)
    engine.runAndWait()

def listen():
    """Listen to user voice input and convert it to text"""
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)
    try:
        return recognizer.recognize_google(audio)
    except sr.UnknownValueError:
        return "Sorry, I couldn't understand."
    except sr.RequestError:
        return "Sorry, there was an error."

def send_email(to, subject, body):
    """Send an email"""
    try:
        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.starttls()
        server.login(EMAIL, PASSWORD)
        message = f"Subject: {subject}\n\n{body}"
        server.sendmail(EMAIL, to, message)
        server.quit()
        speak("Email sent successfully.")
    except Exception as e:
        speak(f"Sorry, I couldn't send the email. Error: {e}")

def get_weather(city):
    """Get weather information for a city"""
    api_key = os.getenv("WEATHER_API_KEY")
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        weather = data["weather"][0]["description"]
        temperature = data["main"]["temp"]
        speak(f"The weather in {city} is {weather} with a temperature of {temperature}Â°C.")
    else:
        speak("Sorry, I couldn't fetch the weather information.")

def get_news():
    """Get latest news headlines"""
    api_key = os.getenv("NEWS_API_KEY")
    url = f"https://newsapi.org/v2/top-headlines?country=us&apiKey={api_key}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        headlines = [article["title"] for article in data["articles"][:5]]
        speak("Here are the top news headlines:")
        for headline in headlines:
            speak(headline)
    else:
        speak("Sorry, I couldn't fetch the news.")

def chat_with_gpt(prompt):
    """Chat with OpenAI GPT"""
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=prompt,
        max_tokens=150
    )
    return response.choices[0].text.strip()

def perform_task(command):
    """Perform tasks based on user command"""
    if "time" in command:
        current_time = datetime.datetime.now().strftime("%H:%M:%S")
        speak(f"Current time is {current_time}")
    
    elif "search" in command:
        speak("What do you want to search for?")
        query = listen()
        url = f"https://www.google.com/search?q={query}"
        webbrowser.open(url)
        speak(f"Searching for {query} on Google")
    
    elif "wikipedia" in command:
        speak("What should I search on Wikipedia?")
        query = listen()
        result = wikipedia.summary(query, sentences=2)
        speak(f"According to Wikipedia, {result}")
    
    elif "email" in command:
        speak("Who should I send the email to?")
        to = listen()
        speak("What is the subject?")
        subject = listen()
        speak("What should I say in the email?")
        body = listen()
        send_email(to, subject, body)
    
    elif "weather" in command:
        speak("Which city's weather do you want to know?")
        city = listen()
        get_weather(city)
    
    elif "news" in command:
        get_news()
    
    elif "chat" in command:
        speak("What do you want to chat about?")
        prompt = listen()
        response = chat_with_gpt(prompt)
        speak(response)
    
    elif "exit" in command or "bye" in command:
        speak("Goodbye! Have a great day!")
        exit()
    
    else:
        speak("Sorry, I didn't understand that command.")

# Main Loop
speak("Hello, I am your AI Assistant. How can I help you?")
while True:
    user_command = listen().lower()
    perform_task(user_command)
